name: Test and Publish

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine pytest pytest-cov setuptools pylint
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Linters
      run: |
        pip install flake8 pylint
        flake8 . --count --max-complexity=10 --max-line-length=120 --statistics
        pylint $(git ls-files '*.py')
      continue-on-error: true

    - name: Test setup.py
      run: |
        python setup.py check --metadata --strict
        python setup.py sdist bdist_wheel --dry-run

    - name: Test package installation
      run: |
        pip install -e .
        python -c "import sys; print('Python:', sys.version)"
        python -c "import main; print('Main module imported successfully')"

    - name: Run tests (if test directory exists)
      run: |
        if [ -d "tests" ]; then
          pytest tests/ -v --cov=. --cov-report=xml
        else
          echo "No tests directory found, skipping tests"
        fi
      continue-on-error: true

  build:
    name: Build distribution packages
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Build source distribution and wheel
      run: |
        python -m build

    - name: Check distribution packages
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-packages
        path: dist/
        retention-days: 30

  # publish-github:
  #   name: Publish to GitHub Releases
  #   runs-on: ubuntu-latest
  #   needs: build
  #   if: startsWith(github.ref, 'refs/tags/v')
  #   permissions:
  #     contents: write
  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Download build artifacts
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: python-packages
  #       path: dist/

  #   - name: Create GitHub Release
  #     uses: softprops/action-gh-release@v1
  #     with:
  #       files: dist/*
  #       generate_release_notes: true
  #       draft: false
  #       prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
